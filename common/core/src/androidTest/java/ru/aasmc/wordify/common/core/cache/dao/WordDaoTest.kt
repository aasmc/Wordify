package ru.aasmc.wordify.common.core.cache.dao

import android.content.Context
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.single
import kotlinx.coroutines.flow.take
import kotlinx.coroutines.test.runTest
import org.junit.After
import org.junit.Assert.*
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import ru.aasmc.wordify.common.core.data.cache.WordifyDatabase
import ru.aasmc.wordify.common.core.data.cache.dao.WordDao
import ru.aasmc.wordify.common.core.fakes.FakeCachedWordFactory

@RunWith(AndroidJUnit4::class)
@ExperimentalCoroutinesApi
class WordDaoTest {
    private lateinit var wordifyDatabase: WordifyDatabase
    private lateinit var wordDao: WordDao

    /**
     * Swaps the background executor used by Architecture Components with the one
     * that is synchronous. It allows Room to execute all its operations instantly.
     */
    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    @Before
    fun setupDatabase() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        wordifyDatabase = Room.inMemoryDatabaseBuilder(
            context,
            WordifyDatabase::class.java
        )
            .build()
        wordDao = wordifyDatabase.wordDao()
    }

    @After
    fun closeDatabase() {
        wordifyDatabase.close()
    }

    @Test
    fun insertCachedWordAggregate_getByWordId_correct() = runTest {
        // given
        val cachedWord = FakeCachedWordFactory.createCachedWord(1)
        // when
        wordDao.insertCachedWordAggregate(cachedWord)
        val retrieved = wordDao.getWordById(cachedWord.cachedWord.wordId)

        // then

        // ids of some of the returned word properties would be autogenerated, so checking for
        // equality fails.
        assertEquals(cachedWord.cachedWord.wordId, retrieved?.cachedWord?.wordId)
        assertEquals(cachedWord.cachedWord.pronunciation, retrieved?.cachedWord?.pronunciation)
        assertEquals(cachedWord.cachedWord.frequency, retrieved?.cachedWord?.frequency)
        assertEquals(cachedWord.cachedWord.syllable, retrieved?.cachedWord?.syllable)
        assertFalse(cachedWord.cachedWord.isFavourite)
        val expectedProps = cachedWord.wordProperties[0]
        val retrievedProps = retrieved?.wordProperties?.get(0)
            ?: throw Exception("Retrieved props in test " +
                    "'insertCachedWordAggregate_getByWordId_correct' should not be null")

        assertEquals(expectedProps.derivations.size, retrievedProps.derivations.size)
        assertEquals(
            expectedProps.derivations[0].derivation,
            retrievedProps.derivations[0].derivation
        )
        assertEquals(
            expectedProps.derivations[0].propertiesId,
            retrievedProps.derivations[0].propertiesId
        )

        assertEquals(expectedProps.examples.size, retrievedProps.examples.size)
        assertEquals(expectedProps.examples[0].example, retrievedProps.examples[0].example)
        assertEquals(
            expectedProps.examples[0].propertiesId,
            retrievedProps.derivations[0].propertiesId
        )

        assertEquals(expectedProps.synonyms.size, retrievedProps.synonyms.size)
        assertEquals(expectedProps.synonyms[0].synonym, retrievedProps.synonyms[0].synonym)
        assertEquals(
            expectedProps.synonyms[0].propertiesId,
            retrievedProps.synonyms[0].propertiesId
        )

        assertEquals(
            expectedProps.cachedWordProperties.wordId,
            retrievedProps.cachedWordProperties.wordId
        )
        assertEquals(
            expectedProps.cachedWordProperties.definition,
            retrievedProps.cachedWordProperties.definition
        )
        assertEquals(
            expectedProps.cachedWordProperties.partOfSpeech,
            retrievedProps.cachedWordProperties.partOfSpeech
        )
    }

    @Test
    fun getWordById_success_favourite_word() = runTest {
        // given
        val cachedWord = FakeCachedWordFactory.createFavCacheWord(1)
        wordDao.insertCachedWordAggregate(cachedWord)
        // when
        val retrieved = wordDao.getWordById(cachedWord.cachedWord.wordId)
        // then
        assertTrue(retrieved?.cachedWord?.isFavourite ?: throw Exception("Word in the test cannot be null"))
    }

    @Test
    fun getAllWordsByNameAsc_correctly_returns_flowWithListOf_10_Words_after_inserting_10_Words() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }
        // when
        val words = wordDao.getAllWordsByNameAsc().take(1).single()

        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assert(words[i].cachedWord.wordId <= words[i + 1].cachedWord.wordId)
        }
    }

    @Test
    fun getAllWordsByNameDesc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }
        // when
        val words = wordDao.getAllWordsByNameDesc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assert(words[i].cachedWord.wordId >= words[i + 1].cachedWord.wordId)
        }
    }

    @Test
    fun getAllWordsByTimeAddedDesc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }
        // when
        val words = wordDao.getAllWordsByTimeAddedDesc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assert(words[i].cachedWord.timeAdded >= words[i + 1].cachedWord.timeAdded)
        }
    }

    @Test
    fun getAllWordsByTimeAddedAsc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }
        // when
        val words = wordDao.getAllWordsByTimeAddedAsc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assert(words[i].cachedWord.timeAdded <= words[i + 1].cachedWord.timeAdded)
        }
    }

    @Test
    fun getAllWordsByNameAsc_emptyList() = runTest {
        val words = wordDao.getAllWordsByNameAsc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllWordsByNameDesc_emptyList() = runTest {
        val words = wordDao.getAllWordsByNameDesc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllWordsByTimeAddedAsc_emptyList() = runTest {
        val words = wordDao.getAllWordsByTimeAddedAsc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllWordsByTimeAddedDesc_emptyList() = runTest {
        val words = wordDao.getAllWordsByTimeAddedDesc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllFavWordsByTimeAddedAsc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createFavCacheWord(wordId))
        }
        // when
        val words = wordDao.getAllFavWordsByTimeAddedAsc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.isFavourite)
            assert(words[i].cachedWord.timeAdded <= words[i + 1].cachedWord.timeAdded)
        }
        assertTrue(words[words.lastIndex].cachedWord.isFavourite)
    }

    @Test
    fun getAllFavWordsByTimeAddedDesc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createFavCacheWord(wordId))
        }
        // when
        val words = wordDao.getAllFavWordsByTimeAddedDesc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.isFavourite)
            assert(words[i].cachedWord.timeAdded >= words[i + 1].cachedWord.timeAdded)
        }
        assertTrue(words[words.lastIndex].cachedWord.isFavourite)
    }

    @Test
    fun getAllFavWordsByNameDesc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createFavCacheWord(wordId))
        }
        // when
        val words = wordDao.getAllFavWordsByNameDesc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.isFavourite)
            assert(words[i].cachedWord.wordId >= words[i + 1].cachedWord.wordId)
        }
        assertTrue(words[words.lastIndex].cachedWord.isFavourite)
    }

    @Test
    fun getAllFavWordsByNameAsc_success() = runTest {
        // given
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createFavCacheWord(wordId))
        }
        // when
        val words = wordDao.getAllFavWordsByNameAsc().take(1).single()

        // then
        assertEquals(10, words.size)
        // then
        assertEquals(10, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.isFavourite)
            assert(words[i].cachedWord.wordId <= words[i + 1].cachedWord.wordId)
        }
        assertTrue(words[words.lastIndex].cachedWord.isFavourite)
    }

    @Test
    fun getAllFavWordsByNameAsc_emptyList() = runTest {
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }

        val words = wordDao.getAllFavWordsByNameAsc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllFavWordsByNameDesc_emptyList() = runTest {
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }

        val words = wordDao.getAllFavWordsByNameDesc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllFavWordsByTimeAddedAsc_emptyList() = runTest {
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }

        val words = wordDao.getAllFavWordsByTimeAddedAsc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun getAllFavWordsByTimeAdedDesc_emptyList() = runTest {
        (1..10).forEach { wordId ->
            wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(wordId))
        }

        val words = wordDao.getAllFavWordsByTimeAddedDesc().take(1).single()
        assertTrue(words.isEmpty())
    }

    @Test
    fun searchWordByNameAsc_returns_3_words_sorted_by_name_with_similar_names() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(11))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(111))

        // when
        val words = wordDao.searchWordsByNameAsc("1").take(1).single() ?: emptyList()

        // then
        assertEquals(3, words.size)
        assertEquals("1", words[0].cachedWord.wordId)
        assertEquals("11", words[1].cachedWord.wordId)
        assertEquals("111", words[2].cachedWord.wordId)
    }

    @Test
    fun searchWordByNameDesc_success() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(11))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(111))

        // when
        val words = wordDao.searchWordsByNameDesc("1").take(1).single() ?: emptyList()

        // then
        assertEquals(3, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.wordId >= words[i + 1].cachedWord.wordId)
        }
    }

    @Test
    fun searchWordByTimeAddedDesc_success() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(11))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(111))

        // when
        val words = wordDao.searchWordsByTimeAddedDesc("1").take(1).single() ?: emptyList()

        // then
        assertEquals(3, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.timeAdded >= words[i + 1].cachedWord.timeAdded)
        }
    }

    @Test
    fun searchWordByTimeAddedAsc_success() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(11))
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(111))

        // when
        val words = wordDao.searchWordsByTimeAddedAsc("1").take(1).single() ?: emptyList()

        // then
        assertEquals(3, words.size)
        for (i in 0 until words.lastIndex) {
            assertTrue(words[i].cachedWord.timeAdded <= words[i + 1].cachedWord.timeAdded)
        }
    }


    @Test
    fun getWordById_returns_null_if_no_word_with_name_inDb() = runTest {
        // given
        val wordToSearch = "word"
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        // when
        val word = wordDao.getWordById(wordToSearch)
        // then
        assertNull(word)
    }

    @Test
    fun searchWordsByNameAsc_returns_emptyList() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        // when
        val words = wordDao.searchWordsByNameAsc("2").take(1).single()
        // then
        assertTrue(words.isEmpty())
    }

    @Test
    fun searchWordsByNameDesc_returns_emptyList() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        // when
        val words = wordDao.searchWordsByNameDesc("2").take(1).single()
        // then
        assertTrue(words.isEmpty())
    }

    @Test
    fun searchWordsByTimeAddedAsc_returns_emptyList() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        // when
        val words = wordDao.searchWordsByTimeAddedAsc("2").take(1).single()
        // then
        assertTrue(words.isEmpty())
    }

    @Test
    fun searchWordsByTimeAddedDesc_returns_emptyList() = runTest {
        // given
        wordDao.insertCachedWordAggregate(FakeCachedWordFactory.createCachedWord(1))
        // when
        val words = wordDao.searchWordsByTimeAddedDesc("2").take(1).single()
        // then
        assertTrue(words.isEmpty())
    }

    @Test
    fun setFavourite_success() = runTest {
        // given
        val word = FakeCachedWordFactory.createCachedWord(1)
        wordDao.insertCachedWordAggregate(word)
        // when
        wordDao.setFavourite(word.cachedWord.wordId)
        // then
        val retrieved = wordDao.getWordById(word.cachedWord.wordId)
        assertTrue(retrieved?.cachedWord?.isFavourite ?: throw Exception("Word in test cannot be null"))
    }

    @Test
    fun setNotFavourite_success() = runTest {
        // given
        val word = FakeCachedWordFactory.createCachedWord(1)
        wordDao.insertCachedWordAggregate(word)
        // when
        wordDao.setNotFavourite(word.cachedWord.wordId)
        // then
        val retrieved = wordDao.getWordById(word.cachedWord.wordId)
        assertFalse(retrieved?.cachedWord?.isFavourite ?: throw Exception("Word in test cannot be null"))
    }
}


































